{"version":3,"mappings":"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","names":["routes","path","component","_register_pass_component__WEBPACK_IMPORTED_MODULE_0__","RegisterPassRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_2__","imports","exports","_angular_core__WEBPACK_IMPORTED_MODULE_1__","ctx_r0","ctx_r1","ctx_r2","ctx_r3","RegisterpassComponent","fb","service","toastrService","router","icon","pack","createForm","initStates","submitted","form","invalid","loading","save","value","subscribe","success","navigate","danger","group","uf","_angular_forms__WEBPACK_IMPORTED_MODULE_2__","regress","plate","getStates","states","field","valid","get","selectors","decls","vars","consts","template","ctx","RegisterPassModule","_index__WEBPACK_IMPORTED_MODULE_0__","_nebular_theme__WEBPACK_IMPORTED_MODULE_2__","_angular_forms__WEBPACK_IMPORTED_MODULE_3__","_angular_common__WEBPACK_IMPORTED_MODULE_4__","declarations","RegisterPassService","http","_environments_environment__WEBPACK_IMPORTED_MODULE_0__","name","initial","t","post","getUrl","_angular_core__WEBPACK_IMPORTED_MODULE_2__","factory"],"sources":["webpack:///src/app/pages/operation/register-pass/register-pass-routing.module.ts","webpack:///src/app/pages/operation/register-pass/register-pass.component.html","webpack:///src/app/pages/operation/register-pass/register-pass.component.ts","webpack:///src/app/pages/operation/register-pass/register-pass.module.ts","webpack:///src/app/pages/operation/register-pass/register-pass.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RegisterpassComponent } from './register-pass.component';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: RegisterpassComponent,\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegisterPassRoutingModule {\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"needs-validation\" novalidate [nbSpinner]=\"loading\">\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6 offset-md-2 col-12\">\r\n\r\n      <nb-card>\r\n\r\n        <nb-card-header class=\"text-center\">\r\n          Registrar Passagem\r\n        </nb-card-header>\r\n\r\n      </nb-card>\r\n\r\n        <nb-card>\r\n          <nb-card-body>\r\n            <div class=\"row\">\r\n              <nb-tabset fullWidth>\r\n                <nb-tab [tabIcon]=\"bookIcon\">\r\n\r\n                  <div class=\"row text-center\">\r\n                    <h6>Dados da Passagem</h6>\r\n                  </div>\r\n\r\n                  <div class=\"row\">\r\n                    <label class=\"label\">Unidade Fiscal*:</label>\r\n                    <nb-select\r\n                      *ngIf=\"states\"\r\n                      fullWidth\r\n                      class=\"form-group\"\r\n                      placeholder=\"Selecione\"\r\n                      [status]='getStatus(uf)'\r\n                      [formControl]=\"uf\"\r\n                      [ngClass]=\"{\r\n                        'is-valid': (uf.valid && uf.touched),\r\n                        'is-invalid': (uf.invalid && uf.touched) }\"\r\n                      >\r\n                      <nb-option *ngFor=\"let state of states\" [value]='state.name'>{{state.initial}}</nb-option>\r\n                    </nb-select>\r\n\r\n\r\n                    <label class=\"label\">Sentido da Via*:</label>\r\n                    <nb-select\r\n                      *ngIf=\"states\"\r\n                      fullWidth\r\n                      class=\"form-group\"\r\n                      placeholder=\"Selecione\"\r\n                      [status]='getStatus(uf)'\r\n                      [formControl]=\"uf\"\r\n                      [ngClass]=\"{\r\n                        'is-valid': (uf.valid && uf.touched),\r\n                        'is-invalid': (uf.invalid && uf.touched) }\"\r\n                      >\r\n                      <nb-option *ngFor=\"let state of states\" [value]='state.name'>{{state.initial}}</nb-option>\r\n                    </nb-select>\r\n\r\n\r\n                    <label class=\"label\">UF de destino:</label>\r\n                    <nb-select\r\n                      *ngIf=\"states\"\r\n                      fullWidth\r\n                      class=\"form-group\"\r\n                      placeholder=\"Selecione\"\r\n                      [status]='getStatus(uf)'\r\n                      [formControl]=\"uf\"\r\n                      [ngClass]=\"{\r\n                        'is-valid': (uf.valid && uf.touched),\r\n                        'is-invalid': (uf.invalid && uf.touched) }\"\r\n                      >\r\n                      <nb-option *ngFor=\"let state of states\" [value]='state.name'>{{state.initial}}</nb-option>\r\n                    </nb-select>\r\n\r\n                    <div class=\"row\">\r\n                      <div class=\"col-12\">\r\n                        <label class=\"label\">Retorno?:</label>\r\n                      </div>\r\n\r\n                      <div class=\"col-12\">\r\n                        <nb-radio-group\r\n                        id=\"regress\"\r\n                        fullWidth\r\n                        title=\"Retorno\"\r\n                        [formControl]=\"regress\"\r\n                        [status]='getStatus(regress)'\r\n                        name=\"reactive-forms-group\"\r\n                        [ngClass]=\"{\r\n                          'is-valid': (regress.valid && regress.touched),\r\n                          'is-invalid': (regress.invalid && regress.touched) }\"\r\n                        >\r\n                        <nb-radio value=\"1\">Sim</nb-radio>\r\n                        <nb-radio value=\"2\">Não</nb-radio>\r\n\r\n                      </nb-radio-group>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </nb-tab>\r\n\r\n                <nb-tab [tabIcon]=\"carIcon\">\r\n                  <div class=\"row text-center\">\r\n                    <h6>Dados do Transporte</h6>\r\n                  </div>\r\n\r\n                  <div class=\"row form-group\">\r\n\r\n                    <label for=\"plate\" class=\"label\">Placa do Veiculo*:</label>\r\n                    <input\r\n                      id=\"plate\"\r\n                      type=\"text\"\r\n                      [status]='getStatus(plate)'\r\n                      formControlName=\"plate\"\r\n                      nbInput\r\n                      class=\"form-group\"\r\n                      fullWidth\r\n                      placeholder=\"Placa do veiculos\"\r\n                      [ngClass]=\"{\r\n                        'is-valid': (plate.valid && plate.touched),\r\n                        'is-invalid': (plate.invalid && plate.touched) }\"\r\n                    >\r\n\r\n                    <label class=\"label\">UF Veiculos*:</label>\r\n                    <nb-select\r\n                    *ngIf=\"states\"\r\n                    fullWidth\r\n                    class=\"form-group\"\r\n                    placeholder=\"Selecione\"\r\n                    [status]='getStatus(uf)'\r\n                    [formControl]=\"uf\"\r\n                    [ngClass]=\"{\r\n                      'is-valid': (uf.valid && uf.touched),\r\n                      'is-invalid': (uf.invalid && uf.touched) }\"\r\n                      >\r\n                      <nb-option *ngFor=\"let state of states\" [value]='state.name'>{{state.initial}}</nb-option>\r\n                    </nb-select>\r\n\r\n                    <label class=\"label\">Placa Carreta:</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      [status]='getStatus(plate)'\r\n                      formControlName=\"plate\"\r\n                      nbInput\r\n                      class=\"form-group\"\r\n                      fullWidth\r\n                      placeholder=\"Placa do veiculos\"\r\n                      [ngClass]=\"{\r\n                        'is-valid': (plate.valid && plate.touched),\r\n                        'is-invalid': (plate.invalid && plate.touched) }\"\r\n                    >\r\n\r\n                    <label class=\"label\">Observações:</label>\r\n                    <textarea\r\n                      type=\"text\"\r\n                      [status]='getStatus(plate)'\r\n                      formControlName=\"plate\"\r\n                      nbInput\r\n                      class=\"form-group\"\r\n                      fullWidth\r\n                      placeholder=\"Observações\"\r\n                      [ngClass]=\"{\r\n                        'is-valid': (plate.valid && plate.touched),\r\n                        'is-invalid': (plate.invalid && plate.touched) }\"\r\n                    >\r\n                    </textarea>\r\n\r\n\r\n                  </div>\r\n                </nb-tab>\r\n\r\n              </nb-tabset>\r\n            </div>\r\n          </nb-card-body>\r\n        </nb-card>\r\n\r\n      <button\r\n        nbButton\r\n        fullWidth\r\n        status=\"primary\"\r\n        size=\"large\">\r\n        Registrar Passagem\r\n      </button>\r\n\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NbIconConfig, NbToastrService } from '@nebular/theme';\r\nimport { State } from '../../../@core/data/state';\r\nimport { RegisterPassService } from './register-pass.service';\r\n\r\n@Component({\r\n  selector: 'ngx-registerpass',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: `./register-pass.component.html`,\r\n  styles: [`\r\n  :host nb-tab {\r\n    padding: 1.25rem;\r\n  }`],\r\n})\r\nexport class RegisterpassComponent implements OnInit{\r\n\r\n  public form: FormGroup;\r\n  public submitted: boolean = false;\r\n  public loading: boolean = false;\r\n  public states: State[] = [];\r\n\r\n  public bookIcon: NbIconConfig = { icon: 'book-outline', pack: 'eva' };\r\n  public carIcon: NbIconConfig = { icon: 'car-outline', pack: 'eva' };\r\n\r\n  constructor(\r\n    public fb: FormBuilder,\r\n    public service: RegisterPassService,\r\n    public toastrService: NbToastrService,\r\n    public router: Router,\r\n    ) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createForm()\r\n    this.initStates()\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.loading = true;\r\n    this.service.save(this.form.value).subscribe(\r\n      () => {\r\n        this.loading = false;\r\n        this.toastrService.success('Concluido','Concluido com Sucesso')\r\n        this.router.navigate([ './pages/operation/alert' ]);\r\n      },\r\n      () => {\r\n        this.toastrService.danger('Erro','Não foi possivel comunicar com o servidor')\r\n        this.loading = false;\r\n      },\r\n    );\r\n\r\n  }\r\n\r\n  public createForm() {\r\n\r\n    this.form = this.fb.group({\r\n\r\n      uf: new FormControl(\r\n        null, [\r\n        Validators.required,\r\n      ]),\r\n\r\n      regress: new FormControl(\r\n        null, [\r\n        Validators.required,\r\n      ]),\r\n\r\n      plate: new FormControl(\r\n        null, [\r\n        Validators.required,\r\n      ]),\r\n\r\n    });\r\n  }\r\n\r\n  public initStates(){\r\n    this.service.getStates().subscribe((states)=>{\r\n      this.states = states;\r\n    })\r\n  }\r\n\r\n  public getStatus(field: any): string {\r\n\r\n    if (!this.submitted ) {\r\n      return 'basic';\r\n     }\r\n\r\n     if (field.valid) {\r\n       return 'success';\r\n     }\r\n\r\n     return 'danger';\r\n\r\n  }\r\n\r\n  public get uf() {\r\n    return this.form.get('uf');\r\n  }\r\n\r\n  public get regress() {\r\n    return this.form.get('regress');\r\n  }\r\n\r\n  public get plate() {\r\n    return this.form.get('plate');\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NbButtonModule, NbCardModule, NbInputModule, NbRadioModule, NbSelectModule, NbSpinnerModule, NbTabsetModule } from '@nebular/theme';\r\nimport { RegisterpassComponent, RegisterPassRoutingModule, RegisterPassService } from './_index';\r\n\r\n@NgModule({\r\n  imports:\r\n  [\r\n    RegisterPassRoutingModule,\r\n    NbCardModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbSelectModule,\r\n    ReactiveFormsModule,\r\n    NbSpinnerModule,\r\n    CommonModule,\r\n    NbTabsetModule,\r\n    NbRadioModule,\r\n  ],\r\n\r\n  declarations:\r\n  [\r\n    RegisterpassComponent,\r\n  ],\r\n\r\n  providers:\r\n  [\r\n    RegisterPassService\r\n  ]\r\n\r\n})\r\nexport class RegisterPassModule {\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { State } from '../../../@core/data/state';\r\nimport { Observable, of as observableOf } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RegisterPassService  {\r\n\r\n  getUrl(): string {\r\n    return `${environment.baseUrl}/register-pass`;\r\n  }\r\n\r\n  constructor(\r\n    public http: HttpClient,\r\n    ) {\r\n\r\n  }\r\n\r\n  getStates(): Observable<State[]>{\r\n    return observableOf([\r\n      { name: 'AC', initial: 'Acre' },\r\n      { name: 'AL', initial: 'Alagoas' },\r\n      { name: 'AP', initial: 'Amapá' },\r\n      { name: 'AM', initial: 'Amazonas' },\r\n      { name: 'BA', initial: 'Bahia' },\r\n      { name: 'CE', initial: 'Ceara' },\r\n      { name: 'DF', initial: 'Distrito Federal' },\r\n      { name: 'ES', initial: 'Espírito Santo' },\r\n      { name: 'GO', initial: 'Goiás' },\r\n      { name: 'MA', initial: 'Maranhão' },\r\n      { name: 'MT', initial: 'Mato Grosso' },\r\n      { name: 'MS', initial: 'Mato Grosso do Sul' },\r\n      { name: 'MG', initial: 'Minas Gerais' },\r\n      { name: 'PA', initial: 'Pará' },\r\n      { name: 'PB', initial: 'Paraíba' },\r\n      { name: 'PR', initial: 'Paraná' },\r\n      { name: 'PE', initial: 'Pernambuco' },\r\n      { name: 'PI', initial: 'Piauí' },\r\n      { name: 'RJ', initial: 'Rio de Janeiro' },\r\n      { name: 'RN', initial: 'Rio Grande do Norte' },\r\n      { name: 'RS', initial: 'Rio Grande do Sul' },\r\n      { name: 'RO', initial: 'Rondônia' },\r\n      { name: 'RR', initial: 'Roraima' },\r\n      { name: 'SC', initial: 'Santa Catarina' },\r\n      { name: 'SP', initial: 'São Paulo' },\r\n      { name: 'SE', initial: 'Sergipe' },\r\n      { name: 'TO', initial: 'Tocantins' },\r\n    ]);\r\n  }\r\n\r\n  save(t: any): Observable<any> {\r\n    return this.http.post<any>(this.getUrl(), t);\r\n  }\r\n\r\n}\r\n"]}